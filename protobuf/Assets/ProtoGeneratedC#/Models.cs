// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Models {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_Card__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Card, global::Card.Builder> internal__static_Card__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_Player__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Player, global::Player.Builder> internal__static_Player__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_Item__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Item, global::Item.Builder> internal__static_Item__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static Models() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgxtb2RlbHMucHJvdG8iEgoEQ2FyZBIKCgJpZBgBIAIoCSI6CgZQbGF5ZXIS", 
          "CgoCaWQYASACKAkSDgoGaGVhbHRoGAIgAigFEhQKBWl0ZW1zGAQgAygLMgUu", 
          "SXRlbSKSAQoESXRlbRIPCgdpdGVtX2lkGAEgAigJEgwKBG5hbWUYAyACKAkS", 
          "EwoLZGVzY3JpcHRpb24YBCACKAkSFAoMY2F0YWxvZ19uYW1lGAUgASgJEhkK", 
          "EWNhdGFsb2dfaW1hZ2VfdXJsGAYgASgJEhYKDml0ZW1faW1hZ2VfdXJsGAcg", 
        "ASgJEg0KBXByaWNlGAkgAigB"));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_Card__Descriptor = Descriptor.MessageTypes[0];
      internal__static_Card__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Card, global::Card.Builder>(internal__static_Card__Descriptor,
              new string[] { "Id", });
      internal__static_Player__Descriptor = Descriptor.MessageTypes[1];
      internal__static_Player__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Player, global::Player.Builder>(internal__static_Player__Descriptor,
              new string[] { "Id", "Health", "Items", });
      internal__static_Item__Descriptor = Descriptor.MessageTypes[2];
      internal__static_Item__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Item, global::Item.Builder>(internal__static_Item__Descriptor,
              new string[] { "ItemId", "Name", "Description", "CatalogName", "CatalogImageUrl", "ItemImageUrl", "Price", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Card : pb::GeneratedMessage<Card, Card.Builder> {
  private Card() { }
  private static readonly Card defaultInstance = new Card().MakeReadOnly();
  private static readonly string[] _cardFieldNames = new string[] { "id" };
  private static readonly uint[] _cardFieldTags = new uint[] { 10 };
  public static Card DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Card DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Card ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Models.internal__static_Card__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Card, Card.Builder> InternalFieldAccessors {
    get { return global::Models.internal__static_Card__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private string id_ = "";
  public bool HasId {
    get { return hasId; }
  }
  public string Id {
    get { return id_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cardFieldNames;
    if (hasId) {
      output.WriteString(1, field_names[0], Id);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Id);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static Card ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Card ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Card ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Card ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Card ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Card ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Card ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Card ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Card ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Card ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Card MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Card prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Card, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Card cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Card result;
    
    private Card PrepareBuilder() {
      if (resultIsReadOnly) {
        Card original = result;
        result = new Card();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Card MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Card.Descriptor; }
    }
    
    public override Card DefaultInstanceForType {
      get { return global::Card.DefaultInstance; }
    }
    
    public override Card BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Card) {
        return MergeFrom((Card) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Card other) {
      if (other == global::Card.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cardFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cardFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasId = input.ReadString(ref result.id_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public string Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = "";
      return this;
    }
  }
  static Card() {
    object.ReferenceEquals(global::Models.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Player : pb::GeneratedMessage<Player, Player.Builder> {
  private Player() { }
  private static readonly Player defaultInstance = new Player().MakeReadOnly();
  private static readonly string[] _playerFieldNames = new string[] { "health", "id", "items" };
  private static readonly uint[] _playerFieldTags = new uint[] { 16, 10, 34 };
  public static Player DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Player DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Player ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Models.internal__static_Player__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Player, Player.Builder> InternalFieldAccessors {
    get { return global::Models.internal__static_Player__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private string id_ = "";
  public bool HasId {
    get { return hasId; }
  }
  public string Id {
    get { return id_; }
  }
  
  public const int HealthFieldNumber = 2;
  private bool hasHealth;
  private int health_;
  public bool HasHealth {
    get { return hasHealth; }
  }
  public int Health {
    get { return health_; }
  }
  
  public const int ItemsFieldNumber = 4;
  private pbc::PopsicleList<global::Item> items_ = new pbc::PopsicleList<global::Item>();
  public scg::IList<global::Item> ItemsList {
    get { return items_; }
  }
  public int ItemsCount {
    get { return items_.Count; }
  }
  public global::Item GetItems(int index) {
    return items_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      if (!hasHealth) return false;
      foreach (global::Item element in ItemsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _playerFieldNames;
    if (hasId) {
      output.WriteString(1, field_names[1], Id);
    }
    if (hasHealth) {
      output.WriteInt32(2, field_names[0], Health);
    }
    if (items_.Count > 0) {
      output.WriteMessageArray(4, field_names[2], items_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Id);
    }
    if (hasHealth) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Health);
    }
    foreach (global::Item element in ItemsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static Player ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Player ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Player ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Player ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Player ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Player ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Player ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Player ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Player ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Player ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Player MakeReadOnly() {
    items_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Player prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Player, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Player cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Player result;
    
    private Player PrepareBuilder() {
      if (resultIsReadOnly) {
        Player original = result;
        result = new Player();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Player MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Player.Descriptor; }
    }
    
    public override Player DefaultInstanceForType {
      get { return global::Player.DefaultInstance; }
    }
    
    public override Player BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Player) {
        return MergeFrom((Player) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Player other) {
      if (other == global::Player.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasHealth) {
        Health = other.Health;
      }
      if (other.items_.Count != 0) {
        result.items_.Add(other.items_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasId = input.ReadString(ref result.id_);
            break;
          }
          case 16: {
            result.hasHealth = input.ReadInt32(ref result.health_);
            break;
          }
          case 34: {
            input.ReadMessageArray(tag, field_name, result.items_, global::Item.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public string Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = "";
      return this;
    }
    
    public bool HasHealth {
      get { return result.hasHealth; }
    }
    public int Health {
      get { return result.Health; }
      set { SetHealth(value); }
    }
    public Builder SetHealth(int value) {
      PrepareBuilder();
      result.hasHealth = true;
      result.health_ = value;
      return this;
    }
    public Builder ClearHealth() {
      PrepareBuilder();
      result.hasHealth = false;
      result.health_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::Item> ItemsList {
      get { return PrepareBuilder().items_; }
    }
    public int ItemsCount {
      get { return result.ItemsCount; }
    }
    public global::Item GetItems(int index) {
      return result.GetItems(index);
    }
    public Builder SetItems(int index, global::Item value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.items_[index] = value;
      return this;
    }
    public Builder SetItems(int index, global::Item.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.items_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddItems(global::Item value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.items_.Add(value);
      return this;
    }
    public Builder AddItems(global::Item.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.items_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeItems(scg::IEnumerable<global::Item> values) {
      PrepareBuilder();
      result.items_.Add(values);
      return this;
    }
    public Builder ClearItems() {
      PrepareBuilder();
      result.items_.Clear();
      return this;
    }
  }
  static Player() {
    object.ReferenceEquals(global::Models.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Item : pb::GeneratedMessage<Item, Item.Builder> {
  private Item() { }
  private static readonly Item defaultInstance = new Item().MakeReadOnly();
  private static readonly string[] _itemFieldNames = new string[] { "catalog_image_url", "catalog_name", "description", "item_id", "item_image_url", "name", "price" };
  private static readonly uint[] _itemFieldTags = new uint[] { 50, 42, 34, 10, 58, 26, 73 };
  public static Item DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Item DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Item ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Models.internal__static_Item__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Item, Item.Builder> InternalFieldAccessors {
    get { return global::Models.internal__static_Item__FieldAccessorTable; }
  }
  
  public const int ItemIdFieldNumber = 1;
  private bool hasItemId;
  private string itemId_ = "";
  public bool HasItemId {
    get { return hasItemId; }
  }
  public string ItemId {
    get { return itemId_; }
  }
  
  public const int NameFieldNumber = 3;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int DescriptionFieldNumber = 4;
  private bool hasDescription;
  private string description_ = "";
  public bool HasDescription {
    get { return hasDescription; }
  }
  public string Description {
    get { return description_; }
  }
  
  public const int CatalogNameFieldNumber = 5;
  private bool hasCatalogName;
  private string catalogName_ = "";
  public bool HasCatalogName {
    get { return hasCatalogName; }
  }
  public string CatalogName {
    get { return catalogName_; }
  }
  
  public const int CatalogImageUrlFieldNumber = 6;
  private bool hasCatalogImageUrl;
  private string catalogImageUrl_ = "";
  public bool HasCatalogImageUrl {
    get { return hasCatalogImageUrl; }
  }
  public string CatalogImageUrl {
    get { return catalogImageUrl_; }
  }
  
  public const int ItemImageUrlFieldNumber = 7;
  private bool hasItemImageUrl;
  private string itemImageUrl_ = "";
  public bool HasItemImageUrl {
    get { return hasItemImageUrl; }
  }
  public string ItemImageUrl {
    get { return itemImageUrl_; }
  }
  
  public const int PriceFieldNumber = 9;
  private bool hasPrice;
  private double price_;
  public bool HasPrice {
    get { return hasPrice; }
  }
  public double Price {
    get { return price_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasItemId) return false;
      if (!hasName) return false;
      if (!hasDescription) return false;
      if (!hasPrice) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _itemFieldNames;
    if (hasItemId) {
      output.WriteString(1, field_names[3], ItemId);
    }
    if (hasName) {
      output.WriteString(3, field_names[5], Name);
    }
    if (hasDescription) {
      output.WriteString(4, field_names[2], Description);
    }
    if (hasCatalogName) {
      output.WriteString(5, field_names[1], CatalogName);
    }
    if (hasCatalogImageUrl) {
      output.WriteString(6, field_names[0], CatalogImageUrl);
    }
    if (hasItemImageUrl) {
      output.WriteString(7, field_names[4], ItemImageUrl);
    }
    if (hasPrice) {
      output.WriteDouble(9, field_names[6], Price);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasItemId) {
      size += pb::CodedOutputStream.ComputeStringSize(1, ItemId);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Name);
    }
    if (hasDescription) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Description);
    }
    if (hasCatalogName) {
      size += pb::CodedOutputStream.ComputeStringSize(5, CatalogName);
    }
    if (hasCatalogImageUrl) {
      size += pb::CodedOutputStream.ComputeStringSize(6, CatalogImageUrl);
    }
    if (hasItemImageUrl) {
      size += pb::CodedOutputStream.ComputeStringSize(7, ItemImageUrl);
    }
    if (hasPrice) {
      size += pb::CodedOutputStream.ComputeDoubleSize(9, Price);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static Item ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Item ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Item ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Item ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Item ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Item ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Item ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Item ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Item ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Item ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Item MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Item prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Item, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Item cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Item result;
    
    private Item PrepareBuilder() {
      if (resultIsReadOnly) {
        Item original = result;
        result = new Item();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Item MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Item.Descriptor; }
    }
    
    public override Item DefaultInstanceForType {
      get { return global::Item.DefaultInstance; }
    }
    
    public override Item BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Item) {
        return MergeFrom((Item) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Item other) {
      if (other == global::Item.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasCatalogName) {
        CatalogName = other.CatalogName;
      }
      if (other.HasCatalogImageUrl) {
        CatalogImageUrl = other.CatalogImageUrl;
      }
      if (other.HasItemImageUrl) {
        ItemImageUrl = other.ItemImageUrl;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_itemFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _itemFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasItemId = input.ReadString(ref result.itemId_);
            break;
          }
          case 26: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 34: {
            result.hasDescription = input.ReadString(ref result.description_);
            break;
          }
          case 42: {
            result.hasCatalogName = input.ReadString(ref result.catalogName_);
            break;
          }
          case 50: {
            result.hasCatalogImageUrl = input.ReadString(ref result.catalogImageUrl_);
            break;
          }
          case 58: {
            result.hasItemImageUrl = input.ReadString(ref result.itemImageUrl_);
            break;
          }
          case 73: {
            result.hasPrice = input.ReadDouble(ref result.price_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasItemId {
      get { return result.hasItemId; }
    }
    public string ItemId {
      get { return result.ItemId; }
      set { SetItemId(value); }
    }
    public Builder SetItemId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasItemId = true;
      result.itemId_ = value;
      return this;
    }
    public Builder ClearItemId() {
      PrepareBuilder();
      result.hasItemId = false;
      result.itemId_ = "";
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasDescription {
      get { return result.hasDescription; }
    }
    public string Description {
      get { return result.Description; }
      set { SetDescription(value); }
    }
    public Builder SetDescription(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDescription = true;
      result.description_ = value;
      return this;
    }
    public Builder ClearDescription() {
      PrepareBuilder();
      result.hasDescription = false;
      result.description_ = "";
      return this;
    }
    
    public bool HasCatalogName {
      get { return result.hasCatalogName; }
    }
    public string CatalogName {
      get { return result.CatalogName; }
      set { SetCatalogName(value); }
    }
    public Builder SetCatalogName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCatalogName = true;
      result.catalogName_ = value;
      return this;
    }
    public Builder ClearCatalogName() {
      PrepareBuilder();
      result.hasCatalogName = false;
      result.catalogName_ = "";
      return this;
    }
    
    public bool HasCatalogImageUrl {
      get { return result.hasCatalogImageUrl; }
    }
    public string CatalogImageUrl {
      get { return result.CatalogImageUrl; }
      set { SetCatalogImageUrl(value); }
    }
    public Builder SetCatalogImageUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCatalogImageUrl = true;
      result.catalogImageUrl_ = value;
      return this;
    }
    public Builder ClearCatalogImageUrl() {
      PrepareBuilder();
      result.hasCatalogImageUrl = false;
      result.catalogImageUrl_ = "";
      return this;
    }
    
    public bool HasItemImageUrl {
      get { return result.hasItemImageUrl; }
    }
    public string ItemImageUrl {
      get { return result.ItemImageUrl; }
      set { SetItemImageUrl(value); }
    }
    public Builder SetItemImageUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasItemImageUrl = true;
      result.itemImageUrl_ = value;
      return this;
    }
    public Builder ClearItemImageUrl() {
      PrepareBuilder();
      result.hasItemImageUrl = false;
      result.itemImageUrl_ = "";
      return this;
    }
    
    public bool HasPrice {
      get { return result.hasPrice; }
    }
    public double Price {
      get { return result.Price; }
      set { SetPrice(value); }
    }
    public Builder SetPrice(double value) {
      PrepareBuilder();
      result.hasPrice = true;
      result.price_ = value;
      return this;
    }
    public Builder ClearPrice() {
      PrepareBuilder();
      result.hasPrice = false;
      result.price_ = 0D;
      return this;
    }
  }
  static Item() {
    object.ReferenceEquals(global::Models.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
