// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class ClientMessages {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_ClientMessage__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ClientMessage, global::ClientMessage.Builder> internal__static_ClientMessage__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_RegisterUserRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::RegisterUserRequest, global::RegisterUserRequest.Builder> internal__static_RegisterUserRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_LoginUserRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::LoginUserRequest, global::LoginUserRequest.Builder> internal__static_LoginUserRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_AttackRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::AttackRequest, global::AttackRequest.Builder> internal__static_AttackRequest__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static ClientMessages() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChVjbGllbnRfbWVzc2FnZXMucHJvdG8aDG1vZGVscy5wcm90byK9AQoNQ2xp", 
          "ZW50TWVzc2FnZRIgCgR0eXBlGBYgAigOMhIuQ2xpZW50TWVzc2FnZVR5cGUS", 
          "MwoVcmVnaXN0ZXJfdXNlcl9yZXF1ZXN0GAIgASgLMhQuUmVnaXN0ZXJVc2Vy", 
          "UmVxdWVzdBItChJsb2dpbl91c2VyX3JlcXVlc3QYAyABKAsyES5Mb2dpblVz", 
          "ZXJSZXF1ZXN0EiYKDmF0dGFja19yZXF1ZXN0GAQgASgLMg4uQXR0YWNrUmVx", 
          "dWVzdCK2AQoTUmVnaXN0ZXJVc2VyUmVxdWVzdBIRCgl1c2VyX25hbWUYASAC", 
          "KAkSFwoPaGFzaGVkX3Bhc3N3b3JkGAIgAigJEhIKCmZpcnN0X25hbWUYAyAC", 
          "KAkSEQoJbGFzdF9uYW1lGAQgAigJEhEKCWF2YXRhcl9pZBgFIAIoCRIRCglk", 
          "ZXZpY2VfaWQYBiACKAkSEwoLZGV2aWNlX3R5cGUYByACKAUSEQoJZ29vZ2xl", 
          "X2lkGAggAigJIj4KEExvZ2luVXNlclJlcXVlc3QSEQoJdXNlcl9uYW1lGAEg", 
          "AigJEhcKD2hhc2hlZF9wYXNzd29yZBgCIAIoCSIyCg1BdHRhY2tSZXF1ZXN0", 
          "Eg4KBmRhbWFnZRgBIAIoBRIRCgl0YXJnZXRfaWQYAiACKAkqWgoRQ2xpZW50", 
          "TWVzc2FnZVR5cGUSGQoVUkVHSVNURVJfVVNFUl9SRVFVRVNUEAISFgoSTE9H", 
        "SU5fVVNFUl9SRVFVRVNUEAMSEgoOQVRUQUNLX1JFUVVFU1QQBA=="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_ClientMessage__Descriptor = Descriptor.MessageTypes[0];
      internal__static_ClientMessage__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ClientMessage, global::ClientMessage.Builder>(internal__static_ClientMessage__Descriptor,
              new string[] { "Type", "RegisterUserRequest", "LoginUserRequest", "AttackRequest", });
      internal__static_RegisterUserRequest__Descriptor = Descriptor.MessageTypes[1];
      internal__static_RegisterUserRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::RegisterUserRequest, global::RegisterUserRequest.Builder>(internal__static_RegisterUserRequest__Descriptor,
              new string[] { "UserName", "HashedPassword", "FirstName", "LastName", "AvatarId", "DeviceId", "DeviceType", "GoogleId", });
      internal__static_LoginUserRequest__Descriptor = Descriptor.MessageTypes[2];
      internal__static_LoginUserRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::LoginUserRequest, global::LoginUserRequest.Builder>(internal__static_LoginUserRequest__Descriptor,
              new string[] { "UserName", "HashedPassword", });
      internal__static_AttackRequest__Descriptor = Descriptor.MessageTypes[3];
      internal__static_AttackRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::AttackRequest, global::AttackRequest.Builder>(internal__static_AttackRequest__Descriptor,
              new string[] { "Damage", "TargetId", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        global::Models.Descriptor, 
        }, assigner);
  }
  #endregion
  
}
#region Enums
public enum ClientMessageType {
  REGISTER_USER_REQUEST = 2,
  LOGIN_USER_REQUEST = 3,
  ATTACK_REQUEST = 4,
}

#endregion

#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ClientMessage : pb::GeneratedMessage<ClientMessage, ClientMessage.Builder> {
  private ClientMessage() { }
  private static readonly ClientMessage defaultInstance = new ClientMessage().MakeReadOnly();
  private static readonly string[] _clientMessageFieldNames = new string[] { "attack_request", "login_user_request", "register_user_request", "type" };
  private static readonly uint[] _clientMessageFieldTags = new uint[] { 34, 26, 18, 176 };
  public static ClientMessage DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ClientMessage DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ClientMessage ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientMessages.internal__static_ClientMessage__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ClientMessage, ClientMessage.Builder> InternalFieldAccessors {
    get { return global::ClientMessages.internal__static_ClientMessage__FieldAccessorTable; }
  }
  
  public const int TypeFieldNumber = 22;
  private bool hasType;
  private global::ClientMessageType type_ = global::ClientMessageType.REGISTER_USER_REQUEST;
  public bool HasType {
    get { return hasType; }
  }
  public global::ClientMessageType Type {
    get { return type_; }
  }
  
  public const int RegisterUserRequestFieldNumber = 2;
  private bool hasRegisterUserRequest;
  private global::RegisterUserRequest registerUserRequest_;
  public bool HasRegisterUserRequest {
    get { return hasRegisterUserRequest; }
  }
  public global::RegisterUserRequest RegisterUserRequest {
    get { return registerUserRequest_ ?? global::RegisterUserRequest.DefaultInstance; }
  }
  
  public const int LoginUserRequestFieldNumber = 3;
  private bool hasLoginUserRequest;
  private global::LoginUserRequest loginUserRequest_;
  public bool HasLoginUserRequest {
    get { return hasLoginUserRequest; }
  }
  public global::LoginUserRequest LoginUserRequest {
    get { return loginUserRequest_ ?? global::LoginUserRequest.DefaultInstance; }
  }
  
  public const int AttackRequestFieldNumber = 4;
  private bool hasAttackRequest;
  private global::AttackRequest attackRequest_;
  public bool HasAttackRequest {
    get { return hasAttackRequest; }
  }
  public global::AttackRequest AttackRequest {
    get { return attackRequest_ ?? global::AttackRequest.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasType) return false;
      if (HasRegisterUserRequest) {
        if (!RegisterUserRequest.IsInitialized) return false;
      }
      if (HasLoginUserRequest) {
        if (!LoginUserRequest.IsInitialized) return false;
      }
      if (HasAttackRequest) {
        if (!AttackRequest.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _clientMessageFieldNames;
    if (hasRegisterUserRequest) {
      output.WriteMessage(2, field_names[2], RegisterUserRequest);
    }
    if (hasLoginUserRequest) {
      output.WriteMessage(3, field_names[1], LoginUserRequest);
    }
    if (hasAttackRequest) {
      output.WriteMessage(4, field_names[0], AttackRequest);
    }
    if (hasType) {
      output.WriteEnum(22, field_names[3], (int) Type, Type);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasType) {
      size += pb::CodedOutputStream.ComputeEnumSize(22, (int) Type);
    }
    if (hasRegisterUserRequest) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, RegisterUserRequest);
    }
    if (hasLoginUserRequest) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, LoginUserRequest);
    }
    if (hasAttackRequest) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, AttackRequest);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ClientMessage ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ClientMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ClientMessage ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ClientMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ClientMessage ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ClientMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ClientMessage ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ClientMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ClientMessage ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ClientMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ClientMessage MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ClientMessage prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ClientMessage, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ClientMessage cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ClientMessage result;
    
    private ClientMessage PrepareBuilder() {
      if (resultIsReadOnly) {
        ClientMessage original = result;
        result = new ClientMessage();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ClientMessage MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ClientMessage.Descriptor; }
    }
    
    public override ClientMessage DefaultInstanceForType {
      get { return global::ClientMessage.DefaultInstance; }
    }
    
    public override ClientMessage BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ClientMessage) {
        return MergeFrom((ClientMessage) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ClientMessage other) {
      if (other == global::ClientMessage.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasRegisterUserRequest) {
        MergeRegisterUserRequest(other.RegisterUserRequest);
      }
      if (other.HasLoginUserRequest) {
        MergeLoginUserRequest(other.LoginUserRequest);
      }
      if (other.HasAttackRequest) {
        MergeAttackRequest(other.AttackRequest);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_clientMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _clientMessageFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 18: {
            global::RegisterUserRequest.Builder subBuilder = global::RegisterUserRequest.CreateBuilder();
            if (result.hasRegisterUserRequest) {
              subBuilder.MergeFrom(RegisterUserRequest);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            RegisterUserRequest = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            global::LoginUserRequest.Builder subBuilder = global::LoginUserRequest.CreateBuilder();
            if (result.hasLoginUserRequest) {
              subBuilder.MergeFrom(LoginUserRequest);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            LoginUserRequest = subBuilder.BuildPartial();
            break;
          }
          case 34: {
            global::AttackRequest.Builder subBuilder = global::AttackRequest.CreateBuilder();
            if (result.hasAttackRequest) {
              subBuilder.MergeFrom(AttackRequest);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            AttackRequest = subBuilder.BuildPartial();
            break;
          }
          case 176: {
            object unknown;
            if(input.ReadEnum(ref result.type_, out unknown)) {
              result.hasType = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(22, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasType {
     get { return result.hasType; }
    }
    public global::ClientMessageType Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(global::ClientMessageType value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = global::ClientMessageType.REGISTER_USER_REQUEST;
      return this;
    }
    
    public bool HasRegisterUserRequest {
     get { return result.hasRegisterUserRequest; }
    }
    public global::RegisterUserRequest RegisterUserRequest {
      get { return result.RegisterUserRequest; }
      set { SetRegisterUserRequest(value); }
    }
    public Builder SetRegisterUserRequest(global::RegisterUserRequest value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRegisterUserRequest = true;
      result.registerUserRequest_ = value;
      return this;
    }
    public Builder SetRegisterUserRequest(global::RegisterUserRequest.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasRegisterUserRequest = true;
      result.registerUserRequest_ = builderForValue.Build();
      return this;
    }
    public Builder MergeRegisterUserRequest(global::RegisterUserRequest value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasRegisterUserRequest &&
          result.registerUserRequest_ != global::RegisterUserRequest.DefaultInstance) {
          result.registerUserRequest_ = global::RegisterUserRequest.CreateBuilder(result.registerUserRequest_).MergeFrom(value).BuildPartial();
      } else {
        result.registerUserRequest_ = value;
      }
      result.hasRegisterUserRequest = true;
      return this;
    }
    public Builder ClearRegisterUserRequest() {
      PrepareBuilder();
      result.hasRegisterUserRequest = false;
      result.registerUserRequest_ = null;
      return this;
    }
    
    public bool HasLoginUserRequest {
     get { return result.hasLoginUserRequest; }
    }
    public global::LoginUserRequest LoginUserRequest {
      get { return result.LoginUserRequest; }
      set { SetLoginUserRequest(value); }
    }
    public Builder SetLoginUserRequest(global::LoginUserRequest value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLoginUserRequest = true;
      result.loginUserRequest_ = value;
      return this;
    }
    public Builder SetLoginUserRequest(global::LoginUserRequest.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLoginUserRequest = true;
      result.loginUserRequest_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLoginUserRequest(global::LoginUserRequest value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLoginUserRequest &&
          result.loginUserRequest_ != global::LoginUserRequest.DefaultInstance) {
          result.loginUserRequest_ = global::LoginUserRequest.CreateBuilder(result.loginUserRequest_).MergeFrom(value).BuildPartial();
      } else {
        result.loginUserRequest_ = value;
      }
      result.hasLoginUserRequest = true;
      return this;
    }
    public Builder ClearLoginUserRequest() {
      PrepareBuilder();
      result.hasLoginUserRequest = false;
      result.loginUserRequest_ = null;
      return this;
    }
    
    public bool HasAttackRequest {
     get { return result.hasAttackRequest; }
    }
    public global::AttackRequest AttackRequest {
      get { return result.AttackRequest; }
      set { SetAttackRequest(value); }
    }
    public Builder SetAttackRequest(global::AttackRequest value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAttackRequest = true;
      result.attackRequest_ = value;
      return this;
    }
    public Builder SetAttackRequest(global::AttackRequest.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasAttackRequest = true;
      result.attackRequest_ = builderForValue.Build();
      return this;
    }
    public Builder MergeAttackRequest(global::AttackRequest value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasAttackRequest &&
          result.attackRequest_ != global::AttackRequest.DefaultInstance) {
          result.attackRequest_ = global::AttackRequest.CreateBuilder(result.attackRequest_).MergeFrom(value).BuildPartial();
      } else {
        result.attackRequest_ = value;
      }
      result.hasAttackRequest = true;
      return this;
    }
    public Builder ClearAttackRequest() {
      PrepareBuilder();
      result.hasAttackRequest = false;
      result.attackRequest_ = null;
      return this;
    }
  }
  static ClientMessage() {
    object.ReferenceEquals(global::ClientMessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RegisterUserRequest : pb::GeneratedMessage<RegisterUserRequest, RegisterUserRequest.Builder> {
  private RegisterUserRequest() { }
  private static readonly RegisterUserRequest defaultInstance = new RegisterUserRequest().MakeReadOnly();
  private static readonly string[] _registerUserRequestFieldNames = new string[] { "avatar_id", "device_id", "device_type", "first_name", "google_id", "hashed_password", "last_name", "user_name" };
  private static readonly uint[] _registerUserRequestFieldTags = new uint[] { 42, 50, 56, 26, 66, 18, 34, 10 };
  public static RegisterUserRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override RegisterUserRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override RegisterUserRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientMessages.internal__static_RegisterUserRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<RegisterUserRequest, RegisterUserRequest.Builder> InternalFieldAccessors {
    get { return global::ClientMessages.internal__static_RegisterUserRequest__FieldAccessorTable; }
  }
  
  public const int UserNameFieldNumber = 1;
  private bool hasUserName;
  private string userName_ = "";
  public bool HasUserName {
    get { return hasUserName; }
  }
  public string UserName {
    get { return userName_; }
  }
  
  public const int HashedPasswordFieldNumber = 2;
  private bool hasHashedPassword;
  private string hashedPassword_ = "";
  public bool HasHashedPassword {
    get { return hasHashedPassword; }
  }
  public string HashedPassword {
    get { return hashedPassword_; }
  }
  
  public const int FirstNameFieldNumber = 3;
  private bool hasFirstName;
  private string firstName_ = "";
  public bool HasFirstName {
    get { return hasFirstName; }
  }
  public string FirstName {
    get { return firstName_; }
  }
  
  public const int LastNameFieldNumber = 4;
  private bool hasLastName;
  private string lastName_ = "";
  public bool HasLastName {
    get { return hasLastName; }
  }
  public string LastName {
    get { return lastName_; }
  }
  
  public const int AvatarIdFieldNumber = 5;
  private bool hasAvatarId;
  private string avatarId_ = "";
  public bool HasAvatarId {
    get { return hasAvatarId; }
  }
  public string AvatarId {
    get { return avatarId_; }
  }
  
  public const int DeviceIdFieldNumber = 6;
  private bool hasDeviceId;
  private string deviceId_ = "";
  public bool HasDeviceId {
    get { return hasDeviceId; }
  }
  public string DeviceId {
    get { return deviceId_; }
  }
  
  public const int DeviceTypeFieldNumber = 7;
  private bool hasDeviceType;
  private int deviceType_;
  public bool HasDeviceType {
    get { return hasDeviceType; }
  }
  public int DeviceType {
    get { return deviceType_; }
  }
  
  public const int GoogleIdFieldNumber = 8;
  private bool hasGoogleId;
  private string googleId_ = "";
  public bool HasGoogleId {
    get { return hasGoogleId; }
  }
  public string GoogleId {
    get { return googleId_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasUserName) return false;
      if (!hasHashedPassword) return false;
      if (!hasFirstName) return false;
      if (!hasLastName) return false;
      if (!hasAvatarId) return false;
      if (!hasDeviceId) return false;
      if (!hasDeviceType) return false;
      if (!hasGoogleId) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _registerUserRequestFieldNames;
    if (hasUserName) {
      output.WriteString(1, field_names[7], UserName);
    }
    if (hasHashedPassword) {
      output.WriteString(2, field_names[5], HashedPassword);
    }
    if (hasFirstName) {
      output.WriteString(3, field_names[3], FirstName);
    }
    if (hasLastName) {
      output.WriteString(4, field_names[6], LastName);
    }
    if (hasAvatarId) {
      output.WriteString(5, field_names[0], AvatarId);
    }
    if (hasDeviceId) {
      output.WriteString(6, field_names[1], DeviceId);
    }
    if (hasDeviceType) {
      output.WriteInt32(7, field_names[2], DeviceType);
    }
    if (hasGoogleId) {
      output.WriteString(8, field_names[4], GoogleId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUserName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, UserName);
    }
    if (hasHashedPassword) {
      size += pb::CodedOutputStream.ComputeStringSize(2, HashedPassword);
    }
    if (hasFirstName) {
      size += pb::CodedOutputStream.ComputeStringSize(3, FirstName);
    }
    if (hasLastName) {
      size += pb::CodedOutputStream.ComputeStringSize(4, LastName);
    }
    if (hasAvatarId) {
      size += pb::CodedOutputStream.ComputeStringSize(5, AvatarId);
    }
    if (hasDeviceId) {
      size += pb::CodedOutputStream.ComputeStringSize(6, DeviceId);
    }
    if (hasDeviceType) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, DeviceType);
    }
    if (hasGoogleId) {
      size += pb::CodedOutputStream.ComputeStringSize(8, GoogleId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static RegisterUserRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RegisterUserRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RegisterUserRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RegisterUserRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RegisterUserRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RegisterUserRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static RegisterUserRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static RegisterUserRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static RegisterUserRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RegisterUserRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private RegisterUserRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(RegisterUserRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<RegisterUserRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(RegisterUserRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private RegisterUserRequest result;
    
    private RegisterUserRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        RegisterUserRequest original = result;
        result = new RegisterUserRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override RegisterUserRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::RegisterUserRequest.Descriptor; }
    }
    
    public override RegisterUserRequest DefaultInstanceForType {
      get { return global::RegisterUserRequest.DefaultInstance; }
    }
    
    public override RegisterUserRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is RegisterUserRequest) {
        return MergeFrom((RegisterUserRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(RegisterUserRequest other) {
      if (other == global::RegisterUserRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUserName) {
        UserName = other.UserName;
      }
      if (other.HasHashedPassword) {
        HashedPassword = other.HashedPassword;
      }
      if (other.HasFirstName) {
        FirstName = other.FirstName;
      }
      if (other.HasLastName) {
        LastName = other.LastName;
      }
      if (other.HasAvatarId) {
        AvatarId = other.AvatarId;
      }
      if (other.HasDeviceId) {
        DeviceId = other.DeviceId;
      }
      if (other.HasDeviceType) {
        DeviceType = other.DeviceType;
      }
      if (other.HasGoogleId) {
        GoogleId = other.GoogleId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_registerUserRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _registerUserRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasUserName = input.ReadString(ref result.userName_);
            break;
          }
          case 18: {
            result.hasHashedPassword = input.ReadString(ref result.hashedPassword_);
            break;
          }
          case 26: {
            result.hasFirstName = input.ReadString(ref result.firstName_);
            break;
          }
          case 34: {
            result.hasLastName = input.ReadString(ref result.lastName_);
            break;
          }
          case 42: {
            result.hasAvatarId = input.ReadString(ref result.avatarId_);
            break;
          }
          case 50: {
            result.hasDeviceId = input.ReadString(ref result.deviceId_);
            break;
          }
          case 56: {
            result.hasDeviceType = input.ReadInt32(ref result.deviceType_);
            break;
          }
          case 66: {
            result.hasGoogleId = input.ReadString(ref result.googleId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUserName {
      get { return result.hasUserName; }
    }
    public string UserName {
      get { return result.UserName; }
      set { SetUserName(value); }
    }
    public Builder SetUserName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserName = true;
      result.userName_ = value;
      return this;
    }
    public Builder ClearUserName() {
      PrepareBuilder();
      result.hasUserName = false;
      result.userName_ = "";
      return this;
    }
    
    public bool HasHashedPassword {
      get { return result.hasHashedPassword; }
    }
    public string HashedPassword {
      get { return result.HashedPassword; }
      set { SetHashedPassword(value); }
    }
    public Builder SetHashedPassword(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasHashedPassword = true;
      result.hashedPassword_ = value;
      return this;
    }
    public Builder ClearHashedPassword() {
      PrepareBuilder();
      result.hasHashedPassword = false;
      result.hashedPassword_ = "";
      return this;
    }
    
    public bool HasFirstName {
      get { return result.hasFirstName; }
    }
    public string FirstName {
      get { return result.FirstName; }
      set { SetFirstName(value); }
    }
    public Builder SetFirstName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFirstName = true;
      result.firstName_ = value;
      return this;
    }
    public Builder ClearFirstName() {
      PrepareBuilder();
      result.hasFirstName = false;
      result.firstName_ = "";
      return this;
    }
    
    public bool HasLastName {
      get { return result.hasLastName; }
    }
    public string LastName {
      get { return result.LastName; }
      set { SetLastName(value); }
    }
    public Builder SetLastName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLastName = true;
      result.lastName_ = value;
      return this;
    }
    public Builder ClearLastName() {
      PrepareBuilder();
      result.hasLastName = false;
      result.lastName_ = "";
      return this;
    }
    
    public bool HasAvatarId {
      get { return result.hasAvatarId; }
    }
    public string AvatarId {
      get { return result.AvatarId; }
      set { SetAvatarId(value); }
    }
    public Builder SetAvatarId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAvatarId = true;
      result.avatarId_ = value;
      return this;
    }
    public Builder ClearAvatarId() {
      PrepareBuilder();
      result.hasAvatarId = false;
      result.avatarId_ = "";
      return this;
    }
    
    public bool HasDeviceId {
      get { return result.hasDeviceId; }
    }
    public string DeviceId {
      get { return result.DeviceId; }
      set { SetDeviceId(value); }
    }
    public Builder SetDeviceId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDeviceId = true;
      result.deviceId_ = value;
      return this;
    }
    public Builder ClearDeviceId() {
      PrepareBuilder();
      result.hasDeviceId = false;
      result.deviceId_ = "";
      return this;
    }
    
    public bool HasDeviceType {
      get { return result.hasDeviceType; }
    }
    public int DeviceType {
      get { return result.DeviceType; }
      set { SetDeviceType(value); }
    }
    public Builder SetDeviceType(int value) {
      PrepareBuilder();
      result.hasDeviceType = true;
      result.deviceType_ = value;
      return this;
    }
    public Builder ClearDeviceType() {
      PrepareBuilder();
      result.hasDeviceType = false;
      result.deviceType_ = 0;
      return this;
    }
    
    public bool HasGoogleId {
      get { return result.hasGoogleId; }
    }
    public string GoogleId {
      get { return result.GoogleId; }
      set { SetGoogleId(value); }
    }
    public Builder SetGoogleId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGoogleId = true;
      result.googleId_ = value;
      return this;
    }
    public Builder ClearGoogleId() {
      PrepareBuilder();
      result.hasGoogleId = false;
      result.googleId_ = "";
      return this;
    }
  }
  static RegisterUserRequest() {
    object.ReferenceEquals(global::ClientMessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class LoginUserRequest : pb::GeneratedMessage<LoginUserRequest, LoginUserRequest.Builder> {
  private LoginUserRequest() { }
  private static readonly LoginUserRequest defaultInstance = new LoginUserRequest().MakeReadOnly();
  private static readonly string[] _loginUserRequestFieldNames = new string[] { "hashed_password", "user_name" };
  private static readonly uint[] _loginUserRequestFieldTags = new uint[] { 18, 10 };
  public static LoginUserRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override LoginUserRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override LoginUserRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientMessages.internal__static_LoginUserRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<LoginUserRequest, LoginUserRequest.Builder> InternalFieldAccessors {
    get { return global::ClientMessages.internal__static_LoginUserRequest__FieldAccessorTable; }
  }
  
  public const int UserNameFieldNumber = 1;
  private bool hasUserName;
  private string userName_ = "";
  public bool HasUserName {
    get { return hasUserName; }
  }
  public string UserName {
    get { return userName_; }
  }
  
  public const int HashedPasswordFieldNumber = 2;
  private bool hasHashedPassword;
  private string hashedPassword_ = "";
  public bool HasHashedPassword {
    get { return hasHashedPassword; }
  }
  public string HashedPassword {
    get { return hashedPassword_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasUserName) return false;
      if (!hasHashedPassword) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _loginUserRequestFieldNames;
    if (hasUserName) {
      output.WriteString(1, field_names[1], UserName);
    }
    if (hasHashedPassword) {
      output.WriteString(2, field_names[0], HashedPassword);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUserName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, UserName);
    }
    if (hasHashedPassword) {
      size += pb::CodedOutputStream.ComputeStringSize(2, HashedPassword);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static LoginUserRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LoginUserRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LoginUserRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LoginUserRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LoginUserRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LoginUserRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static LoginUserRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static LoginUserRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static LoginUserRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LoginUserRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private LoginUserRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(LoginUserRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<LoginUserRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(LoginUserRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private LoginUserRequest result;
    
    private LoginUserRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        LoginUserRequest original = result;
        result = new LoginUserRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override LoginUserRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::LoginUserRequest.Descriptor; }
    }
    
    public override LoginUserRequest DefaultInstanceForType {
      get { return global::LoginUserRequest.DefaultInstance; }
    }
    
    public override LoginUserRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is LoginUserRequest) {
        return MergeFrom((LoginUserRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(LoginUserRequest other) {
      if (other == global::LoginUserRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUserName) {
        UserName = other.UserName;
      }
      if (other.HasHashedPassword) {
        HashedPassword = other.HashedPassword;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_loginUserRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _loginUserRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasUserName = input.ReadString(ref result.userName_);
            break;
          }
          case 18: {
            result.hasHashedPassword = input.ReadString(ref result.hashedPassword_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUserName {
      get { return result.hasUserName; }
    }
    public string UserName {
      get { return result.UserName; }
      set { SetUserName(value); }
    }
    public Builder SetUserName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserName = true;
      result.userName_ = value;
      return this;
    }
    public Builder ClearUserName() {
      PrepareBuilder();
      result.hasUserName = false;
      result.userName_ = "";
      return this;
    }
    
    public bool HasHashedPassword {
      get { return result.hasHashedPassword; }
    }
    public string HashedPassword {
      get { return result.HashedPassword; }
      set { SetHashedPassword(value); }
    }
    public Builder SetHashedPassword(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasHashedPassword = true;
      result.hashedPassword_ = value;
      return this;
    }
    public Builder ClearHashedPassword() {
      PrepareBuilder();
      result.hasHashedPassword = false;
      result.hashedPassword_ = "";
      return this;
    }
  }
  static LoginUserRequest() {
    object.ReferenceEquals(global::ClientMessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AttackRequest : pb::GeneratedMessage<AttackRequest, AttackRequest.Builder> {
  private AttackRequest() { }
  private static readonly AttackRequest defaultInstance = new AttackRequest().MakeReadOnly();
  private static readonly string[] _attackRequestFieldNames = new string[] { "damage", "target_id" };
  private static readonly uint[] _attackRequestFieldTags = new uint[] { 8, 18 };
  public static AttackRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override AttackRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override AttackRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientMessages.internal__static_AttackRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<AttackRequest, AttackRequest.Builder> InternalFieldAccessors {
    get { return global::ClientMessages.internal__static_AttackRequest__FieldAccessorTable; }
  }
  
  public const int DamageFieldNumber = 1;
  private bool hasDamage;
  private int damage_;
  public bool HasDamage {
    get { return hasDamage; }
  }
  public int Damage {
    get { return damage_; }
  }
  
  public const int TargetIdFieldNumber = 2;
  private bool hasTargetId;
  private string targetId_ = "";
  public bool HasTargetId {
    get { return hasTargetId; }
  }
  public string TargetId {
    get { return targetId_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasDamage) return false;
      if (!hasTargetId) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _attackRequestFieldNames;
    if (hasDamage) {
      output.WriteInt32(1, field_names[0], Damage);
    }
    if (hasTargetId) {
      output.WriteString(2, field_names[1], TargetId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasDamage) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Damage);
    }
    if (hasTargetId) {
      size += pb::CodedOutputStream.ComputeStringSize(2, TargetId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static AttackRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AttackRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AttackRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AttackRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AttackRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AttackRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static AttackRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static AttackRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static AttackRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AttackRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private AttackRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(AttackRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<AttackRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(AttackRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private AttackRequest result;
    
    private AttackRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        AttackRequest original = result;
        result = new AttackRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override AttackRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::AttackRequest.Descriptor; }
    }
    
    public override AttackRequest DefaultInstanceForType {
      get { return global::AttackRequest.DefaultInstance; }
    }
    
    public override AttackRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is AttackRequest) {
        return MergeFrom((AttackRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(AttackRequest other) {
      if (other == global::AttackRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasDamage) {
        Damage = other.Damage;
      }
      if (other.HasTargetId) {
        TargetId = other.TargetId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_attackRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _attackRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasDamage = input.ReadInt32(ref result.damage_);
            break;
          }
          case 18: {
            result.hasTargetId = input.ReadString(ref result.targetId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasDamage {
      get { return result.hasDamage; }
    }
    public int Damage {
      get { return result.Damage; }
      set { SetDamage(value); }
    }
    public Builder SetDamage(int value) {
      PrepareBuilder();
      result.hasDamage = true;
      result.damage_ = value;
      return this;
    }
    public Builder ClearDamage() {
      PrepareBuilder();
      result.hasDamage = false;
      result.damage_ = 0;
      return this;
    }
    
    public bool HasTargetId {
      get { return result.hasTargetId; }
    }
    public string TargetId {
      get { return result.TargetId; }
      set { SetTargetId(value); }
    }
    public Builder SetTargetId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTargetId = true;
      result.targetId_ = value;
      return this;
    }
    public Builder ClearTargetId() {
      PrepareBuilder();
      result.hasTargetId = false;
      result.targetId_ = "";
      return this;
    }
  }
  static AttackRequest() {
    object.ReferenceEquals(global::ClientMessages.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
