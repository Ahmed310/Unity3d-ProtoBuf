// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class ServerMessages {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_ServerMessage__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ServerMessage, global::ServerMessage.Builder> internal__static_ServerMessage__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_RegisterUserResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::RegisterUserResponse, global::RegisterUserResponse.Builder> internal__static_RegisterUserResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_LoginUserResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::LoginUserResponse, global::LoginUserResponse.Builder> internal__static_LoginUserResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_AttackResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::AttackResponse, global::AttackResponse.Builder> internal__static_AttackResponse__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static ServerMessages() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChVzZXJ2ZXJfbWVzc2FnZXMucHJvdG8aDG1vZGVscy5wcm90byLDAQoNU2Vy", 
          "dmVyTWVzc2FnZRIgCgR0eXBlGBggASgOMhIuU2VydmVyTWVzc2FnZVR5cGUS", 
          "NQoWcmVnaXN0ZXJfdXNlcl9yZXNwb25zZRgBIAEoCzIVLlJlZ2lzdGVyVXNl", 
          "clJlc3BvbnNlEi8KE2xvZ2luX3VzZXJfcmVzcG9uc2UYAiABKAsyEi5Mb2dp", 
          "blVzZXJSZXNwb25zZRIoCg9hdHRhY2tfcmVzcG9uc2UYAyABKAsyDy5BdHRh", 
          "Y2tSZXNwb25zZSJVChRSZWdpc3RlclVzZXJSZXNwb25zZRIYChBtZXRhZGF0", 
          "YV92ZXJzaW9uGAEgAigFEhEKCXVzZXJfbmFtZRgCIAEoCRIQCghwYXNzd29y", 
          "ZBgDIAEoCSJDChFMb2dpblVzZXJSZXNwb25zZRIYChBtZXRhZGF0YV92ZXJz", 
          "aW9uGAEgAigFEhQKDGdhbWVfdmVyc2lvbhgCIAIoBSJWCg5BdHRhY2tSZXNw", 
          "b25zZRIRCglwbGF5ZXJfaWQYASACKAkSEQoJdGFyZ2V0X2lkGAIgAigJEh4K", 
          "FnRhcmdldF9ocF9hZnRlcl9hdHRhY2sYAyACKAIqXQoRU2VydmVyTWVzc2Fn", 
          "ZVR5cGUSGgoWUkVHSVNURVJfVVNFUl9SRVNQT05TRRABEhcKE0xPR0lOX1VT", 
        "RVJfUkVTUE9OU0UQAhITCg9BVFRBQ0tfUkVTUE9OU0UQAw=="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_ServerMessage__Descriptor = Descriptor.MessageTypes[0];
      internal__static_ServerMessage__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ServerMessage, global::ServerMessage.Builder>(internal__static_ServerMessage__Descriptor,
              new string[] { "Type", "RegisterUserResponse", "LoginUserResponse", "AttackResponse", });
      internal__static_RegisterUserResponse__Descriptor = Descriptor.MessageTypes[1];
      internal__static_RegisterUserResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::RegisterUserResponse, global::RegisterUserResponse.Builder>(internal__static_RegisterUserResponse__Descriptor,
              new string[] { "MetadataVersion", "UserName", "Password", });
      internal__static_LoginUserResponse__Descriptor = Descriptor.MessageTypes[2];
      internal__static_LoginUserResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::LoginUserResponse, global::LoginUserResponse.Builder>(internal__static_LoginUserResponse__Descriptor,
              new string[] { "MetadataVersion", "GameVersion", });
      internal__static_AttackResponse__Descriptor = Descriptor.MessageTypes[3];
      internal__static_AttackResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::AttackResponse, global::AttackResponse.Builder>(internal__static_AttackResponse__Descriptor,
              new string[] { "PlayerId", "TargetId", "TargetHpAfterAttack", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        global::Models.Descriptor, 
        }, assigner);
  }
  #endregion
  
}
#region Enums
public enum ServerMessageType {
  REGISTER_USER_RESPONSE = 1,
  LOGIN_USER_RESPONSE = 2,
  ATTACK_RESPONSE = 3,
}

#endregion

#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ServerMessage : pb::GeneratedMessage<ServerMessage, ServerMessage.Builder> {
  private ServerMessage() { }
  private static readonly ServerMessage defaultInstance = new ServerMessage().MakeReadOnly();
  private static readonly string[] _serverMessageFieldNames = new string[] { "attack_response", "login_user_response", "register_user_response", "type" };
  private static readonly uint[] _serverMessageFieldTags = new uint[] { 26, 18, 10, 192 };
  public static ServerMessage DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ServerMessage DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ServerMessage ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ServerMessages.internal__static_ServerMessage__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ServerMessage, ServerMessage.Builder> InternalFieldAccessors {
    get { return global::ServerMessages.internal__static_ServerMessage__FieldAccessorTable; }
  }
  
  public const int TypeFieldNumber = 24;
  private bool hasType;
  private global::ServerMessageType type_ = global::ServerMessageType.REGISTER_USER_RESPONSE;
  public bool HasType {
    get { return hasType; }
  }
  public global::ServerMessageType Type {
    get { return type_; }
  }
  
  public const int RegisterUserResponseFieldNumber = 1;
  private bool hasRegisterUserResponse;
  private global::RegisterUserResponse registerUserResponse_;
  public bool HasRegisterUserResponse {
    get { return hasRegisterUserResponse; }
  }
  public global::RegisterUserResponse RegisterUserResponse {
    get { return registerUserResponse_ ?? global::RegisterUserResponse.DefaultInstance; }
  }
  
  public const int LoginUserResponseFieldNumber = 2;
  private bool hasLoginUserResponse;
  private global::LoginUserResponse loginUserResponse_;
  public bool HasLoginUserResponse {
    get { return hasLoginUserResponse; }
  }
  public global::LoginUserResponse LoginUserResponse {
    get { return loginUserResponse_ ?? global::LoginUserResponse.DefaultInstance; }
  }
  
  public const int AttackResponseFieldNumber = 3;
  private bool hasAttackResponse;
  private global::AttackResponse attackResponse_;
  public bool HasAttackResponse {
    get { return hasAttackResponse; }
  }
  public global::AttackResponse AttackResponse {
    get { return attackResponse_ ?? global::AttackResponse.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (HasRegisterUserResponse) {
        if (!RegisterUserResponse.IsInitialized) return false;
      }
      if (HasLoginUserResponse) {
        if (!LoginUserResponse.IsInitialized) return false;
      }
      if (HasAttackResponse) {
        if (!AttackResponse.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _serverMessageFieldNames;
    if (hasRegisterUserResponse) {
      output.WriteMessage(1, field_names[2], RegisterUserResponse);
    }
    if (hasLoginUserResponse) {
      output.WriteMessage(2, field_names[1], LoginUserResponse);
    }
    if (hasAttackResponse) {
      output.WriteMessage(3, field_names[0], AttackResponse);
    }
    if (hasType) {
      output.WriteEnum(24, field_names[3], (int) Type, Type);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasType) {
      size += pb::CodedOutputStream.ComputeEnumSize(24, (int) Type);
    }
    if (hasRegisterUserResponse) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, RegisterUserResponse);
    }
    if (hasLoginUserResponse) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, LoginUserResponse);
    }
    if (hasAttackResponse) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, AttackResponse);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ServerMessage ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ServerMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ServerMessage ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ServerMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ServerMessage ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ServerMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ServerMessage ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ServerMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ServerMessage ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ServerMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ServerMessage MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ServerMessage prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ServerMessage, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ServerMessage cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ServerMessage result;
    
    private ServerMessage PrepareBuilder() {
      if (resultIsReadOnly) {
        ServerMessage original = result;
        result = new ServerMessage();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ServerMessage MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ServerMessage.Descriptor; }
    }
    
    public override ServerMessage DefaultInstanceForType {
      get { return global::ServerMessage.DefaultInstance; }
    }
    
    public override ServerMessage BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ServerMessage) {
        return MergeFrom((ServerMessage) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ServerMessage other) {
      if (other == global::ServerMessage.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasRegisterUserResponse) {
        MergeRegisterUserResponse(other.RegisterUserResponse);
      }
      if (other.HasLoginUserResponse) {
        MergeLoginUserResponse(other.LoginUserResponse);
      }
      if (other.HasAttackResponse) {
        MergeAttackResponse(other.AttackResponse);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_serverMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _serverMessageFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::RegisterUserResponse.Builder subBuilder = global::RegisterUserResponse.CreateBuilder();
            if (result.hasRegisterUserResponse) {
              subBuilder.MergeFrom(RegisterUserResponse);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            RegisterUserResponse = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::LoginUserResponse.Builder subBuilder = global::LoginUserResponse.CreateBuilder();
            if (result.hasLoginUserResponse) {
              subBuilder.MergeFrom(LoginUserResponse);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            LoginUserResponse = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            global::AttackResponse.Builder subBuilder = global::AttackResponse.CreateBuilder();
            if (result.hasAttackResponse) {
              subBuilder.MergeFrom(AttackResponse);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            AttackResponse = subBuilder.BuildPartial();
            break;
          }
          case 192: {
            object unknown;
            if(input.ReadEnum(ref result.type_, out unknown)) {
              result.hasType = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(24, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasType {
     get { return result.hasType; }
    }
    public global::ServerMessageType Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(global::ServerMessageType value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = global::ServerMessageType.REGISTER_USER_RESPONSE;
      return this;
    }
    
    public bool HasRegisterUserResponse {
     get { return result.hasRegisterUserResponse; }
    }
    public global::RegisterUserResponse RegisterUserResponse {
      get { return result.RegisterUserResponse; }
      set { SetRegisterUserResponse(value); }
    }
    public Builder SetRegisterUserResponse(global::RegisterUserResponse value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRegisterUserResponse = true;
      result.registerUserResponse_ = value;
      return this;
    }
    public Builder SetRegisterUserResponse(global::RegisterUserResponse.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasRegisterUserResponse = true;
      result.registerUserResponse_ = builderForValue.Build();
      return this;
    }
    public Builder MergeRegisterUserResponse(global::RegisterUserResponse value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasRegisterUserResponse &&
          result.registerUserResponse_ != global::RegisterUserResponse.DefaultInstance) {
          result.registerUserResponse_ = global::RegisterUserResponse.CreateBuilder(result.registerUserResponse_).MergeFrom(value).BuildPartial();
      } else {
        result.registerUserResponse_ = value;
      }
      result.hasRegisterUserResponse = true;
      return this;
    }
    public Builder ClearRegisterUserResponse() {
      PrepareBuilder();
      result.hasRegisterUserResponse = false;
      result.registerUserResponse_ = null;
      return this;
    }
    
    public bool HasLoginUserResponse {
     get { return result.hasLoginUserResponse; }
    }
    public global::LoginUserResponse LoginUserResponse {
      get { return result.LoginUserResponse; }
      set { SetLoginUserResponse(value); }
    }
    public Builder SetLoginUserResponse(global::LoginUserResponse value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLoginUserResponse = true;
      result.loginUserResponse_ = value;
      return this;
    }
    public Builder SetLoginUserResponse(global::LoginUserResponse.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLoginUserResponse = true;
      result.loginUserResponse_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLoginUserResponse(global::LoginUserResponse value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLoginUserResponse &&
          result.loginUserResponse_ != global::LoginUserResponse.DefaultInstance) {
          result.loginUserResponse_ = global::LoginUserResponse.CreateBuilder(result.loginUserResponse_).MergeFrom(value).BuildPartial();
      } else {
        result.loginUserResponse_ = value;
      }
      result.hasLoginUserResponse = true;
      return this;
    }
    public Builder ClearLoginUserResponse() {
      PrepareBuilder();
      result.hasLoginUserResponse = false;
      result.loginUserResponse_ = null;
      return this;
    }
    
    public bool HasAttackResponse {
     get { return result.hasAttackResponse; }
    }
    public global::AttackResponse AttackResponse {
      get { return result.AttackResponse; }
      set { SetAttackResponse(value); }
    }
    public Builder SetAttackResponse(global::AttackResponse value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAttackResponse = true;
      result.attackResponse_ = value;
      return this;
    }
    public Builder SetAttackResponse(global::AttackResponse.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasAttackResponse = true;
      result.attackResponse_ = builderForValue.Build();
      return this;
    }
    public Builder MergeAttackResponse(global::AttackResponse value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasAttackResponse &&
          result.attackResponse_ != global::AttackResponse.DefaultInstance) {
          result.attackResponse_ = global::AttackResponse.CreateBuilder(result.attackResponse_).MergeFrom(value).BuildPartial();
      } else {
        result.attackResponse_ = value;
      }
      result.hasAttackResponse = true;
      return this;
    }
    public Builder ClearAttackResponse() {
      PrepareBuilder();
      result.hasAttackResponse = false;
      result.attackResponse_ = null;
      return this;
    }
  }
  static ServerMessage() {
    object.ReferenceEquals(global::ServerMessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RegisterUserResponse : pb::GeneratedMessage<RegisterUserResponse, RegisterUserResponse.Builder> {
  private RegisterUserResponse() { }
  private static readonly RegisterUserResponse defaultInstance = new RegisterUserResponse().MakeReadOnly();
  private static readonly string[] _registerUserResponseFieldNames = new string[] { "metadata_version", "password", "user_name" };
  private static readonly uint[] _registerUserResponseFieldTags = new uint[] { 8, 26, 18 };
  public static RegisterUserResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override RegisterUserResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override RegisterUserResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ServerMessages.internal__static_RegisterUserResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<RegisterUserResponse, RegisterUserResponse.Builder> InternalFieldAccessors {
    get { return global::ServerMessages.internal__static_RegisterUserResponse__FieldAccessorTable; }
  }
  
  public const int MetadataVersionFieldNumber = 1;
  private bool hasMetadataVersion;
  private int metadataVersion_;
  public bool HasMetadataVersion {
    get { return hasMetadataVersion; }
  }
  public int MetadataVersion {
    get { return metadataVersion_; }
  }
  
  public const int UserNameFieldNumber = 2;
  private bool hasUserName;
  private string userName_ = "";
  public bool HasUserName {
    get { return hasUserName; }
  }
  public string UserName {
    get { return userName_; }
  }
  
  public const int PasswordFieldNumber = 3;
  private bool hasPassword;
  private string password_ = "";
  public bool HasPassword {
    get { return hasPassword; }
  }
  public string Password {
    get { return password_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMetadataVersion) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _registerUserResponseFieldNames;
    if (hasMetadataVersion) {
      output.WriteInt32(1, field_names[0], MetadataVersion);
    }
    if (hasUserName) {
      output.WriteString(2, field_names[2], UserName);
    }
    if (hasPassword) {
      output.WriteString(3, field_names[1], Password);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMetadataVersion) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, MetadataVersion);
    }
    if (hasUserName) {
      size += pb::CodedOutputStream.ComputeStringSize(2, UserName);
    }
    if (hasPassword) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Password);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static RegisterUserResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RegisterUserResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RegisterUserResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RegisterUserResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RegisterUserResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RegisterUserResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static RegisterUserResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static RegisterUserResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static RegisterUserResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RegisterUserResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private RegisterUserResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(RegisterUserResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<RegisterUserResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(RegisterUserResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private RegisterUserResponse result;
    
    private RegisterUserResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        RegisterUserResponse original = result;
        result = new RegisterUserResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override RegisterUserResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::RegisterUserResponse.Descriptor; }
    }
    
    public override RegisterUserResponse DefaultInstanceForType {
      get { return global::RegisterUserResponse.DefaultInstance; }
    }
    
    public override RegisterUserResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is RegisterUserResponse) {
        return MergeFrom((RegisterUserResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(RegisterUserResponse other) {
      if (other == global::RegisterUserResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMetadataVersion) {
        MetadataVersion = other.MetadataVersion;
      }
      if (other.HasUserName) {
        UserName = other.UserName;
      }
      if (other.HasPassword) {
        Password = other.Password;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_registerUserResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _registerUserResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMetadataVersion = input.ReadInt32(ref result.metadataVersion_);
            break;
          }
          case 18: {
            result.hasUserName = input.ReadString(ref result.userName_);
            break;
          }
          case 26: {
            result.hasPassword = input.ReadString(ref result.password_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMetadataVersion {
      get { return result.hasMetadataVersion; }
    }
    public int MetadataVersion {
      get { return result.MetadataVersion; }
      set { SetMetadataVersion(value); }
    }
    public Builder SetMetadataVersion(int value) {
      PrepareBuilder();
      result.hasMetadataVersion = true;
      result.metadataVersion_ = value;
      return this;
    }
    public Builder ClearMetadataVersion() {
      PrepareBuilder();
      result.hasMetadataVersion = false;
      result.metadataVersion_ = 0;
      return this;
    }
    
    public bool HasUserName {
      get { return result.hasUserName; }
    }
    public string UserName {
      get { return result.UserName; }
      set { SetUserName(value); }
    }
    public Builder SetUserName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserName = true;
      result.userName_ = value;
      return this;
    }
    public Builder ClearUserName() {
      PrepareBuilder();
      result.hasUserName = false;
      result.userName_ = "";
      return this;
    }
    
    public bool HasPassword {
      get { return result.hasPassword; }
    }
    public string Password {
      get { return result.Password; }
      set { SetPassword(value); }
    }
    public Builder SetPassword(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPassword = true;
      result.password_ = value;
      return this;
    }
    public Builder ClearPassword() {
      PrepareBuilder();
      result.hasPassword = false;
      result.password_ = "";
      return this;
    }
  }
  static RegisterUserResponse() {
    object.ReferenceEquals(global::ServerMessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class LoginUserResponse : pb::GeneratedMessage<LoginUserResponse, LoginUserResponse.Builder> {
  private LoginUserResponse() { }
  private static readonly LoginUserResponse defaultInstance = new LoginUserResponse().MakeReadOnly();
  private static readonly string[] _loginUserResponseFieldNames = new string[] { "game_version", "metadata_version" };
  private static readonly uint[] _loginUserResponseFieldTags = new uint[] { 16, 8 };
  public static LoginUserResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override LoginUserResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override LoginUserResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ServerMessages.internal__static_LoginUserResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<LoginUserResponse, LoginUserResponse.Builder> InternalFieldAccessors {
    get { return global::ServerMessages.internal__static_LoginUserResponse__FieldAccessorTable; }
  }
  
  public const int MetadataVersionFieldNumber = 1;
  private bool hasMetadataVersion;
  private int metadataVersion_;
  public bool HasMetadataVersion {
    get { return hasMetadataVersion; }
  }
  public int MetadataVersion {
    get { return metadataVersion_; }
  }
  
  public const int GameVersionFieldNumber = 2;
  private bool hasGameVersion;
  private int gameVersion_;
  public bool HasGameVersion {
    get { return hasGameVersion; }
  }
  public int GameVersion {
    get { return gameVersion_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMetadataVersion) return false;
      if (!hasGameVersion) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _loginUserResponseFieldNames;
    if (hasMetadataVersion) {
      output.WriteInt32(1, field_names[1], MetadataVersion);
    }
    if (hasGameVersion) {
      output.WriteInt32(2, field_names[0], GameVersion);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMetadataVersion) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, MetadataVersion);
    }
    if (hasGameVersion) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, GameVersion);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static LoginUserResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LoginUserResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LoginUserResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LoginUserResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LoginUserResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LoginUserResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static LoginUserResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static LoginUserResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static LoginUserResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LoginUserResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private LoginUserResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(LoginUserResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<LoginUserResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(LoginUserResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private LoginUserResponse result;
    
    private LoginUserResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        LoginUserResponse original = result;
        result = new LoginUserResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override LoginUserResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::LoginUserResponse.Descriptor; }
    }
    
    public override LoginUserResponse DefaultInstanceForType {
      get { return global::LoginUserResponse.DefaultInstance; }
    }
    
    public override LoginUserResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is LoginUserResponse) {
        return MergeFrom((LoginUserResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(LoginUserResponse other) {
      if (other == global::LoginUserResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMetadataVersion) {
        MetadataVersion = other.MetadataVersion;
      }
      if (other.HasGameVersion) {
        GameVersion = other.GameVersion;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_loginUserResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _loginUserResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMetadataVersion = input.ReadInt32(ref result.metadataVersion_);
            break;
          }
          case 16: {
            result.hasGameVersion = input.ReadInt32(ref result.gameVersion_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMetadataVersion {
      get { return result.hasMetadataVersion; }
    }
    public int MetadataVersion {
      get { return result.MetadataVersion; }
      set { SetMetadataVersion(value); }
    }
    public Builder SetMetadataVersion(int value) {
      PrepareBuilder();
      result.hasMetadataVersion = true;
      result.metadataVersion_ = value;
      return this;
    }
    public Builder ClearMetadataVersion() {
      PrepareBuilder();
      result.hasMetadataVersion = false;
      result.metadataVersion_ = 0;
      return this;
    }
    
    public bool HasGameVersion {
      get { return result.hasGameVersion; }
    }
    public int GameVersion {
      get { return result.GameVersion; }
      set { SetGameVersion(value); }
    }
    public Builder SetGameVersion(int value) {
      PrepareBuilder();
      result.hasGameVersion = true;
      result.gameVersion_ = value;
      return this;
    }
    public Builder ClearGameVersion() {
      PrepareBuilder();
      result.hasGameVersion = false;
      result.gameVersion_ = 0;
      return this;
    }
  }
  static LoginUserResponse() {
    object.ReferenceEquals(global::ServerMessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AttackResponse : pb::GeneratedMessage<AttackResponse, AttackResponse.Builder> {
  private AttackResponse() { }
  private static readonly AttackResponse defaultInstance = new AttackResponse().MakeReadOnly();
  private static readonly string[] _attackResponseFieldNames = new string[] { "player_id", "target_hp_after_attack", "target_id" };
  private static readonly uint[] _attackResponseFieldTags = new uint[] { 10, 29, 18 };
  public static AttackResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override AttackResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override AttackResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ServerMessages.internal__static_AttackResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<AttackResponse, AttackResponse.Builder> InternalFieldAccessors {
    get { return global::ServerMessages.internal__static_AttackResponse__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private string playerId_ = "";
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public string PlayerId {
    get { return playerId_; }
  }
  
  public const int TargetIdFieldNumber = 2;
  private bool hasTargetId;
  private string targetId_ = "";
  public bool HasTargetId {
    get { return hasTargetId; }
  }
  public string TargetId {
    get { return targetId_; }
  }
  
  public const int TargetHpAfterAttackFieldNumber = 3;
  private bool hasTargetHpAfterAttack;
  private float targetHpAfterAttack_;
  public bool HasTargetHpAfterAttack {
    get { return hasTargetHpAfterAttack; }
  }
  public float TargetHpAfterAttack {
    get { return targetHpAfterAttack_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPlayerId) return false;
      if (!hasTargetId) return false;
      if (!hasTargetHpAfterAttack) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _attackResponseFieldNames;
    if (hasPlayerId) {
      output.WriteString(1, field_names[0], PlayerId);
    }
    if (hasTargetId) {
      output.WriteString(2, field_names[2], TargetId);
    }
    if (hasTargetHpAfterAttack) {
      output.WriteFloat(3, field_names[1], TargetHpAfterAttack);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeStringSize(1, PlayerId);
    }
    if (hasTargetId) {
      size += pb::CodedOutputStream.ComputeStringSize(2, TargetId);
    }
    if (hasTargetHpAfterAttack) {
      size += pb::CodedOutputStream.ComputeFloatSize(3, TargetHpAfterAttack);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static AttackResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AttackResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AttackResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AttackResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AttackResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AttackResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static AttackResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static AttackResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static AttackResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AttackResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private AttackResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(AttackResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<AttackResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(AttackResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private AttackResponse result;
    
    private AttackResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        AttackResponse original = result;
        result = new AttackResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override AttackResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::AttackResponse.Descriptor; }
    }
    
    public override AttackResponse DefaultInstanceForType {
      get { return global::AttackResponse.DefaultInstance; }
    }
    
    public override AttackResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is AttackResponse) {
        return MergeFrom((AttackResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(AttackResponse other) {
      if (other == global::AttackResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasTargetId) {
        TargetId = other.TargetId;
      }
      if (other.HasTargetHpAfterAttack) {
        TargetHpAfterAttack = other.TargetHpAfterAttack;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_attackResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _attackResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasPlayerId = input.ReadString(ref result.playerId_);
            break;
          }
          case 18: {
            result.hasTargetId = input.ReadString(ref result.targetId_);
            break;
          }
          case 29: {
            result.hasTargetHpAfterAttack = input.ReadFloat(ref result.targetHpAfterAttack_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public string PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = "";
      return this;
    }
    
    public bool HasTargetId {
      get { return result.hasTargetId; }
    }
    public string TargetId {
      get { return result.TargetId; }
      set { SetTargetId(value); }
    }
    public Builder SetTargetId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTargetId = true;
      result.targetId_ = value;
      return this;
    }
    public Builder ClearTargetId() {
      PrepareBuilder();
      result.hasTargetId = false;
      result.targetId_ = "";
      return this;
    }
    
    public bool HasTargetHpAfterAttack {
      get { return result.hasTargetHpAfterAttack; }
    }
    public float TargetHpAfterAttack {
      get { return result.TargetHpAfterAttack; }
      set { SetTargetHpAfterAttack(value); }
    }
    public Builder SetTargetHpAfterAttack(float value) {
      PrepareBuilder();
      result.hasTargetHpAfterAttack = true;
      result.targetHpAfterAttack_ = value;
      return this;
    }
    public Builder ClearTargetHpAfterAttack() {
      PrepareBuilder();
      result.hasTargetHpAfterAttack = false;
      result.targetHpAfterAttack_ = 0F;
      return this;
    }
  }
  static AttackResponse() {
    object.ReferenceEquals(global::ServerMessages.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
